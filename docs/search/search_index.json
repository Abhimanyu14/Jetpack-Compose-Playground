{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jetpack Compose Playground Introduction This is a collection of Jetpack Compose examples/tutorials and demos. What is Jetpack Compose? Jetpack Compose is a modern toolkit for building native Android UI. Jetpack Compose simplifies and accelerates UI development on Android with less code, powerful tools, and intuitive Kotlin APIs. New to Compose? Check Project Setup or Hello World Compose Looking for tutorials/sample code Take a look at the sidebar under Guides Samples or check Compose projects Contributing Interested in adding samples/tutorials? Check Contributing Show some and star the repo to support the project \ud83d\udcdc License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"Overview"},{"location":"#jetpack-compose-playground","text":"","title":"Jetpack Compose Playground"},{"location":"#introduction","text":"This is a collection of Jetpack Compose examples/tutorials and demos.","title":"Introduction"},{"location":"#what-is-jetpack-compose","text":"Jetpack Compose is a modern toolkit for building native Android UI. Jetpack Compose simplifies and accelerates UI development on Android with less code, powerful tools, and intuitive Kotlin APIs.","title":"What is Jetpack Compose?"},{"location":"#new-to-compose","text":"Check Project Setup or Hello World Compose","title":"New to Compose?"},{"location":"#looking-for-tutorialssample-code","text":"Take a look at the sidebar under Guides Samples or check Compose projects","title":"Looking for tutorials/sample code"},{"location":"#contributing","text":"Interested in adding samples/tutorials? Check Contributing","title":"Contributing"},{"location":"#show-some-and-star-the-repo-to-support-the-project","text":"","title":"Show some  and star the repo to support the project"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"\ud83d\udcdc License"},{"location":"community/","text":"Community Slack Bugtracker https://issuetracker.google.com/issues/new?component=612128 Stackoverflow","title":"Community"},{"location":"community/#community","text":"Slack Bugtracker https://issuetracker.google.com/issues/new?component=612128 Stackoverflow","title":"Community"},{"location":"compose_projects/","text":"Compose Projects A list of projects that are related to Jetpack Compose. If you want to add an entry, please edit the table and send PR. Example Apps Sample Description Jetpack Compose Playground Collection of Jetpack Compose example code . Compose Pokedex Pokedex on Jetpack Compose. Compose Samples Repository This repository contains a set of individual Android Studio projects to help you learn about Compose in Android. PeopleInSpace Minimal Kotlin Multiplatform project using Jetpack Compose and SwiftUI ComposeClock Particle clock created with Jetpack Compose framework Libraries Sample Description Compose Router Routing functionality for Jetpack Compose with back stack Compose Glide Image Simple Glide library adaptation for Jetpack Compose.","title":"Compose Projects"},{"location":"compose_projects/#compose-projects","text":"A list of projects that are related to Jetpack Compose. If you want to add an entry, please edit the table and send PR.","title":"Compose Projects"},{"location":"compose_projects/#example-apps","text":"Sample Description Jetpack Compose Playground Collection of Jetpack Compose example code . Compose Pokedex Pokedex on Jetpack Compose. Compose Samples Repository This repository contains a set of individual Android Studio projects to help you learn about Compose in Android. PeopleInSpace Minimal Kotlin Multiplatform project using Jetpack Compose and SwiftUI ComposeClock Particle clock created with Jetpack Compose framework","title":"Example Apps"},{"location":"compose_projects/#libraries","text":"Sample Description Compose Router Routing functionality for Jetpack Compose with back stack Compose Glide Image Simple Glide library adaptation for Jetpack Compose.","title":"Libraries"},{"location":"contributing/","text":"Contributing to Jetpack Compose If you want to improve Compose, join the Kotlin Slack and the #compose channel or file a bug at https://issuetracker.google.com/issues?q=componentid:612128 to this project This project is using MkDocs to generate the pages for Github. The markdown files are located in /mkdocs . The generated files for the github page are in /docs . Do not make changes in this folder, they will be overriden Run docs locally To start the mkdocs server locally, run mkdocs serve in a terminal in the project folder. Add/Change docs The docs are written in markdown files which are all in /mkdocs . To change the navigation sidebar, you need to edit the mkdocs.yml. When you run mkdocs build in a terminal in the project folder, the html files be generated to /docs Feel free to change/add files and send a pull request.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#to-jetpack-compose","text":"If you want to improve Compose, join the Kotlin Slack and the #compose channel or file a bug at https://issuetracker.google.com/issues?q=componentid:612128","title":"to Jetpack Compose"},{"location":"contributing/#to-this-project","text":"This project is using MkDocs to generate the pages for Github. The markdown files are located in /mkdocs . The generated files for the github page are in /docs . Do not make changes in this folder, they will be overriden Run docs locally To start the mkdocs server locally, run mkdocs serve in a terminal in the project folder. Add/Change docs The docs are written in markdown files which are all in /mkdocs . To change the navigation sidebar, you need to edit the mkdocs.yml. When you run mkdocs build in a terminal in the project folder, the html files be generated to /docs Feel free to change/add files and send a pull request.","title":"to this project"},{"location":"resources/","text":"Resources Content Official Documentation Other Documentation Conference talks Articles SpeakerDeck Podcasts Tutorials Extras Official Documentation Jetpack compose Jetpack compose Readme Other Documentation FAQ about Jetpack Compose \u2013 Android\u2019s modern toolkit for building native UI This Wiki Conference Talks Android Developers Backstage : Episode 131: Jetpack Compose and Declarative UIs KotlinConf 2019: The Compose Runtime, Demystified by Leland Richardson KotlinConf 2019: Compose Yourself: Designing a Kotlin First UI Toolkit by Anna-Chiara Clara What s New in Jetpack Compose (Android Dev Summit 19) Understanding Compose (Android Dev Summit 19) #AskAndroid at Android Dev Summit 2019 - Jetpack Compose Google IO19 - Declarative UI patterns DroidconBerlin - Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android DroidconBerlin - Jumping into Jetpack Compose way too early to see what s inside KotlinEverywhere - Jetpack Compose DevFest Kolkata 2019 - Let s Talk Composing UI Articles Diving into Jetpack Compose Compose From First Principles Writing Android UI Code in Jetpack Compose (1 of 2) Jetpack Compose: Optimism and Opportunity Android Jetpack Compose Review SwiftUI vs. Jetpack Compose Android Jetpack Compose First Impression SpeakerDeck Jetpack @Compose Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android Shifting Paradigms Podcasts Android Developer backstage - Episode 115: Jetpack Compose Fragmented Podcast - Episode 171: Jetpack Compose with Leland Richardson Google podcast - Romain Guy \u2013 Podcast S09 E09 Tutorials Raywenderlich - Jetpack Compose Primer Extras Video - Kotlin and Jetpack Compose #compose channel on Kotlin Slack Feel free to contribute! What is Jetpack Compose Links: * Jetpack Compose Tutorial Compose Readme Compose from first Principles AndroidX Git Compose: https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/ Compse UI Docu: https://developer.android.com/reference/kotlin/androidx/ui/packages https://developer.android.com/jetpack/compose/setup https://developer.android.com/jetpack/compose Release Notes: https://developer.android.com/jetpack/androidx/releases/ui","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#content","text":"Official Documentation Other Documentation Conference talks Articles SpeakerDeck Podcasts Tutorials Extras","title":"Content"},{"location":"resources/#official-documentation","text":"Jetpack compose Jetpack compose Readme","title":"Official Documentation"},{"location":"resources/#other-documentation","text":"FAQ about Jetpack Compose \u2013 Android\u2019s modern toolkit for building native UI This Wiki","title":"Other Documentation"},{"location":"resources/#conference-talks","text":"Android Developers Backstage : Episode 131: Jetpack Compose and Declarative UIs KotlinConf 2019: The Compose Runtime, Demystified by Leland Richardson KotlinConf 2019: Compose Yourself: Designing a Kotlin First UI Toolkit by Anna-Chiara Clara What s New in Jetpack Compose (Android Dev Summit 19) Understanding Compose (Android Dev Summit 19) #AskAndroid at Android Dev Summit 2019 - Jetpack Compose Google IO19 - Declarative UI patterns DroidconBerlin - Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android DroidconBerlin - Jumping into Jetpack Compose way too early to see what s inside KotlinEverywhere - Jetpack Compose DevFest Kolkata 2019 - Let s Talk Composing UI","title":"Conference Talks"},{"location":"resources/#articles","text":"Diving into Jetpack Compose Compose From First Principles Writing Android UI Code in Jetpack Compose (1 of 2) Jetpack Compose: Optimism and Opportunity Android Jetpack Compose Review SwiftUI vs. Jetpack Compose Android Jetpack Compose First Impression","title":"Articles"},{"location":"resources/#speakerdeck","text":"Jetpack @Compose Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android Shifting Paradigms","title":"SpeakerDeck"},{"location":"resources/#podcasts","text":"Android Developer backstage - Episode 115: Jetpack Compose Fragmented Podcast - Episode 171: Jetpack Compose with Leland Richardson Google podcast - Romain Guy \u2013 Podcast S09 E09","title":"Podcasts"},{"location":"resources/#tutorials","text":"Raywenderlich - Jetpack Compose Primer","title":"Tutorials"},{"location":"resources/#extras","text":"Video - Kotlin and Jetpack Compose #compose channel on Kotlin Slack Feel free to contribute!","title":"Extras"},{"location":"resources/#what-is-jetpack-compose","text":"Links: * Jetpack Compose Tutorial Compose Readme Compose from first Principles AndroidX Git Compose: https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/ Compse UI Docu: https://developer.android.com/reference/kotlin/androidx/ui/packages https://developer.android.com/jetpack/compose/setup https://developer.android.com/jetpack/compose Release Notes: https://developer.android.com/jetpack/androidx/releases/ui","title":"What is Jetpack Compose"},{"location":"core/pressgesturedetector/","text":"You can use a PressGestureDetector to detect when a compose element gets pressed and released. @Composable fun PressGestureDetectorDemo () { val posX = state { 0f } val posXY = state { 0f } val clickState = state { } Column ( modifier = LayoutWidth . Fill + LayoutHeight . Fill , arrangement = Arrangement . Center ) { PressGestureDetector ( onPress = { position - posX . value = position . x . value posXY . value = position . y . value clickState . value = Pressed }, onRelease = { clickState . value = Released }) { Column ( modifier = LayoutWidth . Fill + LayoutHeight . Fill , arrangement = Arrangement . Center ) { Text ( ClickState: + clickState . value ) Text ( PostitionX: ${posX.value} ) Text ( PostitionY: ${posXY.value} ) } } } }","title":"PressGestureDetector"},{"location":"core/text/","text":"You can use Text to display text. You can use the style argument to define things like textdecoration or fontfamily. @Composable fun TextExample (){ Column { Text ( Just Text ) Text ( Text with cursive font , style = TextStyle ( fontFamily = FontFamily . Cursive )) Text ( text = Text with LineThrough , style = TextStyle ( textDecoration = TextDecoration . LineThrough ) ) Text ( text = Text with underline , style = TextStyle ( textDecoration = TextDecoration . Underline ) ) Text ( text = Text with underline, linethrough and bold , style = TextStyle ( textDecoration = TextDecoration . combine ( listOf ( TextDecoration . Underline , TextDecoration . LineThrough ) ), fontWeight = FontWeight . Bold ) ) } }","title":"Text"},{"location":"foundation/clickable/","text":"Clickable Info This is the API of version dev06. Newer versions may have a different one Childrens of Clickable will become clickable https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#clickable @Composable fun ClickableSample () { val count = state { 0 } Clickable ( onClick = { count . value += 1 }) { // content that you want to make clickable Text ( You have clicked this text: + count . value . toString ()) } }","title":"Clickable"},{"location":"foundation/clickable/#clickable","text":"Info This is the API of version dev06. Newer versions may have a different one Childrens of Clickable will become clickable https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#clickable @Composable fun ClickableSample () { val count = state { 0 } Clickable ( onClick = { count . value += 1 }) { // content that you want to make clickable Text ( You have clicked this text: + count . value . toString ()) } }","title":"Clickable"},{"location":"foundation/draggable/","text":"Draggable https://developer.android.com/reference/kotlin/androidx/ui/foundation/gestures/package-summary#draggable @Composable fun DraggableDemo (){ val max = 300. dp val min = 0. dp val ( minPx , maxPx ) = with ( DensityAmbient . current ) { min . toPx (). value to max . toPx (). value } val position = animatedFloat ( 0f ) position . setBounds ( minPx , maxPx ) Draggable ( DragDirection . Horizontal , position ,{ position . snapTo ( it ) }) { // dragValue is the current value in progress of dragging val draggedDp = with ( DensityAmbient . current ) { position . value . toDp () } Column { Text ( Drag me , modifier = LayoutPadding ( start = draggedDp )) Text ( Dragvalue: + position . value . dp ) } } }","title":"Draggable"},{"location":"foundation/draggable/#draggable","text":"https://developer.android.com/reference/kotlin/androidx/ui/foundation/gestures/package-summary#draggable @Composable fun DraggableDemo (){ val max = 300. dp val min = 0. dp val ( minPx , maxPx ) = with ( DensityAmbient . current ) { min . toPx (). value to max . toPx (). value } val position = animatedFloat ( 0f ) position . setBounds ( minPx , maxPx ) Draggable ( DragDirection . Horizontal , position ,{ position . snapTo ( it ) }) { // dragValue is the current value in progress of dragging val draggedDp = with ( DensityAmbient . current ) { position . value . toDp () } Column { Text ( Drag me , modifier = LayoutPadding ( start = draggedDp )) Text ( Dragvalue: + position . value . dp ) } } }","title":"Draggable"},{"location":"foundation/horizontal_scroller/","text":"HorizontalScroller When an app has layout content that might be longer than the width of the device and that content should be horizontal scrollable, then we need to use a HorizontalScroller. It is the horizontal equivalent of VerticalScroller @Composable fun HorizontalScrollerExample () { HorizontalScroller { //Only one child is allowed in a HorizontalScroller Row { for ( i in 0. . 100 ) { Text ( $i Hello World! , style =( MaterialTheme . typography ()). body1 ) } } } }","title":"HorizontalScroller"},{"location":"foundation/horizontal_scroller/#horizontalscroller","text":"When an app has layout content that might be longer than the width of the device and that content should be horizontal scrollable, then we need to use a HorizontalScroller. It is the horizontal equivalent of VerticalScroller @Composable fun HorizontalScrollerExample () { HorizontalScroller { //Only one child is allowed in a HorizontalScroller Row { for ( i in 0. . 100 ) { Text ( $i Hello World! , style =( MaterialTheme . typography ()). body1 ) } } } }","title":"HorizontalScroller"},{"location":"foundation/vertical_scroller/","text":"VerticalScroller Info This is the API of version dev06. Newer versions may have a different one https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#verticalscroller When an app has layout content that might be longer than the height of the device and that content should be vertically scrollable, then we need to use a VerticalScroller. It s similar to a ScrollView Your browser does not support the video tag. https://github.com/Foso/Jetpack-Compose-Playground/blob/master/docs/images/VerticalScroller.webm @Composable fun VerticalScrollerExample () { VerticalScroller { //Only one child is allowed in a VerticalScroller Column { for ( i in 0. . 100 ) { Text ( $i Hello World! , style =( MaterialTheme . typography ()). body1 ) } } } } Note that a VerticalScroller can only contain a single child element so if you need multiple things to be scrollable, you need to wrap that content into a layout as shown above.","title":"VerticalScroller"},{"location":"foundation/vertical_scroller/#verticalscroller","text":"Info This is the API of version dev06. Newer versions may have a different one https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#verticalscroller When an app has layout content that might be longer than the height of the device and that content should be vertically scrollable, then we need to use a VerticalScroller. It s similar to a ScrollView Your browser does not support the video tag. https://github.com/Foso/Jetpack-Compose-Playground/blob/master/docs/images/VerticalScroller.webm @Composable fun VerticalScrollerExample () { VerticalScroller { //Only one child is allowed in a VerticalScroller Column { for ( i in 0. . 100 ) { Text ( $i Hello World! , style =( MaterialTheme . typography ()). body1 ) } } } } Note that a VerticalScroller can only contain a single child element so if you need multiple things to be scrollable, you need to wrap that content into a layout as shown above.","title":"VerticalScroller"},{"location":"general/compose_lifecycle/","text":"Info This is the API of version dev06. Newer versions may have a different one Compose has some effects -function that can be used in compose function to track the lifecycle of a function. onActive {} willl be called the first time a compose function is applied. onDispose { } will be called when the compose function isn t part of the composition anymore. The example below has a Button that will count up everytime it gets clicked. When the count value gets 3, the Text() function will not be added anymore. The first time the LifecycleDemo will be executed, the +onActive{} in the if-clause will be executed. When the count value gets 3 +onDispose{} inside the if-clause will be called. @Composable fun LifecycleDemo () { val count = state { 0 } Column { Button ( onClick = { count . value ++ }) { Text ( Click me ) } if ( count . value 3 ) { onActive { Log . d ( Compose , onactive with value: + count . value ) } onDispose { Log . d ( Compose , onDispose because value= + count . value ) } Text ( You have clicked the button: + count . value . toString ()) } } }","title":"Compose Lifecycle"},{"location":"general/compose_preview/","text":"You can use the @Preview annotation to preview compose functions inside Android Studio. @Preview @Composable fun TextDemo (){ Text ( Hello ) } @Preview ( name = MyPreviewName ) @Composable fun TextDemo2 (){ Text ( Hello ) } Android Studio Preview","title":"Compose Preview"},{"location":"general/draw_on_canvas/","text":"@Composable fun CanvasDrawExample () { MaterialTheme { Container ( height = 60. dp , expanded = true ) { val paint = Paint () Draw { canvas , parentSize - val centerY = 0f // draw rect paint . color = Color . Blue canvas . drawRect ( Rect ( 0f , centerY + 10 , parentSize . width . value , 55f ), paint ) // draw circle canvas . drawCircle ( Offset ( 50f , 200f ), 40f , paint ) //Draw a line paint . color = Color . Red paint . strokeWidth = 5f canvas . drawLine ( Offset ( 20f , 0f ), Offset ( 200f , 200f ), paint ) } } } }","title":"How to draw on Canvas"},{"location":"general/get_android_context/","text":"Info This is the API of version dev06. Newer versions may have a different one You can use ContextAmbient.current to receive the context of your Android App inside a Compose Function @Composable fun AndroidContextComposeDemo () { val context = ContextAmbient . current Text ( Read this string from Context: + context . getString ( R . string . app_name )) }","title":"How to get Android Context"},{"location":"general/getting_started/","text":"Info Note: Jetpack Compose is currently in Developer Preview. The API surface is not yet finalized, and changes are planned and expected. See the Compose Compiler and Runtime release notes and the Compose UI release notes for the latest updates. Android Studio To use Jetpack Compose you need to use at least a version 4.1 Canary 1 Gradle Dependencies Add this inside in the android{} block your build.gradle buildFeatures { compose true } composeOptions { kotlinCompilerExtensionVersion 0.1.0-dev06 } Below are all compose dependencies that are online avaiable, you don t need to add all of them. dependencies { def compose_version = 0.1.0-dev06 implementation ( androidx.compose:compose-runtime:$compose_version ) implementation androidx.ui:ui-android-text:$compose_version implementation ( androidx.ui:ui-animation:$compose_version ) implementation ( androidx.ui:ui-animation-core:$compose_version ) implementation ( androidx.ui:ui-core:$compose_version ) implementation ( androidx.ui:ui-foundation:$compose_version ) implementation ( androidx.ui:ui-framework:$compose_version ) implementation ( androidx.ui:ui-geometry:$compose_version ) implementation ( androidx.ui:ui-graphics:$compose_version ) implementation ( androidx.ui:ui-layout:$compose_version ) implementation ( androidx.ui:ui-material:$compose_version ) implementation ( androidx.ui:ui-material-icons-core:$compose_version ) implementation ( androidx.ui:ui-material-icons-extended:$compose_version ) implementation ( androidx.ui:ui-platform:$compose_version ) implementation ( androidx.ui:ui-test:$compose_version ) implementation androidx.ui:ui-text:$compose_version implementation androidx.ui:ui-tooling:$compose_version implementation androidx.ui:ui-unit:$compose_version implementation androidx.ui:ui-util:$compose_version implementation androidx.ui:ui-vector:$compose_version }","title":"Project Setup"},{"location":"general/getting_started/#android-studio","text":"To use Jetpack Compose you need to use at least a version 4.1 Canary 1","title":"Android Studio"},{"location":"general/getting_started/#gradle-dependencies","text":"Add this inside in the android{} block your build.gradle buildFeatures { compose true } composeOptions { kotlinCompilerExtensionVersion 0.1.0-dev06 } Below are all compose dependencies that are online avaiable, you don t need to add all of them. dependencies { def compose_version = 0.1.0-dev06 implementation ( androidx.compose:compose-runtime:$compose_version ) implementation androidx.ui:ui-android-text:$compose_version implementation ( androidx.ui:ui-animation:$compose_version ) implementation ( androidx.ui:ui-animation-core:$compose_version ) implementation ( androidx.ui:ui-core:$compose_version ) implementation ( androidx.ui:ui-foundation:$compose_version ) implementation ( androidx.ui:ui-framework:$compose_version ) implementation ( androidx.ui:ui-geometry:$compose_version ) implementation ( androidx.ui:ui-graphics:$compose_version ) implementation ( androidx.ui:ui-layout:$compose_version ) implementation ( androidx.ui:ui-material:$compose_version ) implementation ( androidx.ui:ui-material-icons-core:$compose_version ) implementation ( androidx.ui:ui-material-icons-extended:$compose_version ) implementation ( androidx.ui:ui-platform:$compose_version ) implementation ( androidx.ui:ui-test:$compose_version ) implementation androidx.ui:ui-text:$compose_version implementation androidx.ui:ui-tooling:$compose_version implementation androidx.ui:ui-unit:$compose_version implementation androidx.ui:ui-util:$compose_version implementation androidx.ui:ui-vector:$compose_version }","title":"Gradle Dependencies"},{"location":"general/helloworld/","text":"Hello World Compose Write a simple Compose function A basic Compose View is using a normal Kotlin function which is annotated with @Composable @Composable fun HelloWorld () { Text ( Hello World! ) } Use a Compose function as a view in your android app To use the HelloWorld() function in your App you have to use the setContent() extension function inside a onCreate() in an Activity. class MainActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContent { HelloWorld () } } }","title":"Hello World Compose"},{"location":"general/helloworld/#hello-world-compose","text":"","title":"Hello World Compose"},{"location":"general/helloworld/#write-a-simple-compose-function","text":"A basic Compose View is using a normal Kotlin function which is annotated with @Composable @Composable fun HelloWorld () { Text ( Hello World! ) }","title":"Write a simple Compose function"},{"location":"general/helloworld/#use-a-compose-function-as-a-view-in-your-android-app","text":"To use the HelloWorld() function in your App you have to use the setContent() extension function inside a onCreate() in an Activity. class MainActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContent { HelloWorld () } } }","title":"Use a Compose function as a view in your android app"},{"location":"general/state/","text":"Compose State Define a state 1) state function val textState = state{ Hello } You can use the state function to create a state. state{T} will return a MutableState T 2) @Model You can also use @Model, when you annotate classes with it, you can use the whole class as a state and observe all properties. @Model class TestState { var count = 0 } val textState = TestState () You can then create a object of the class and use it as a state. In this example you would then use textState.count to get/set the value of count. Example In this example we will create a composable with a Text and a Button. On a click on the button, the count state will go up and the text of Text will be updated. Initial state: After Button click: @Composable fun StateDemo (){ val countState = state { 0 } Column { Button ( backgroundColor = MaterialTheme . colors (). secondary , onClick = { countState . value ++}) { Text ( count up ) } Text ( You have clicked the Button + countState . value . toString () + times ) } } val countState = state { 0 } Here we define the state for the click counter. 0 will be the initial value. Because 0 is an Int, the counterState will only allow values which are Int. countState . value With the value property you can get/set the value of the counterstate. In the onClick() function of the Button, the value will be incremented. The Text shows the value of the counterstate. When counterstate is changed, Text will also change.","title":"State"},{"location":"general/state/#compose-state","text":"","title":"Compose State"},{"location":"general/state/#define-a-state","text":"","title":"Define a state"},{"location":"general/state/#1-state-function","text":"val textState = state{ Hello } You can use the state function to create a state. state{T} will return a MutableState T","title":"1) state function"},{"location":"general/state/#2-model","text":"You can also use @Model, when you annotate classes with it, you can use the whole class as a state and observe all properties. @Model class TestState { var count = 0 } val textState = TestState () You can then create a object of the class and use it as a state. In this example you would then use textState.count to get/set the value of count.","title":"2) @Model"},{"location":"general/state/#example","text":"In this example we will create a composable with a Text and a Button. On a click on the button, the count state will go up and the text of Text will be updated. Initial state: After Button click: @Composable fun StateDemo (){ val countState = state { 0 } Column { Button ( backgroundColor = MaterialTheme . colors (). secondary , onClick = { countState . value ++}) { Text ( count up ) } Text ( You have clicked the Button + countState . value . toString () + times ) } } val countState = state { 0 } Here we define the state for the click counter. 0 will be the initial value. Because 0 is an Int, the counterState will only allow values which are Int. countState . value With the value property you can get/set the value of the counterstate. In the onClick() function of the Button, the value will be incremented. The Text shows the value of the counterstate. When counterstate is changed, Text will also change.","title":"Example"},{"location":"layout/column/","text":"Column A Column will show each children below the previous children. It similar to a LinearLayout with vertical orientation. @Composable fun ColumnExample () { Column { Text ( Hello World! ) Text ( Hello World!2 ) } }","title":"Column"},{"location":"layout/column/#column","text":"A Column will show each children below the previous children. It similar to a LinearLayout with vertical orientation. @Composable fun ColumnExample () { Column { Text ( Hello World! ) Text ( Hello World!2 ) } }","title":"Column"},{"location":"layout/layoutpadding/","text":"LayoutPadding You can use the LayoutPadding modifier to set padding to composables that take a modifier as an argument. @Composable fun PaddingDemo () { Column { Text ( TextWithoutPadding ) Column ( modifier = LayoutPadding ( start = 80. dp )){ Text ( TextWith80dpOnlyLeftPadding ) } Column ( LayoutPadding ( all = 80. dp )){ Text ( TextWith80dpPadding ) } } }","title":"LayoutPadding"},{"location":"layout/layoutpadding/#layoutpadding","text":"You can use the LayoutPadding modifier to set padding to composables that take a modifier as an argument. @Composable fun PaddingDemo () { Column { Text ( TextWithoutPadding ) Column ( modifier = LayoutPadding ( start = 80. dp )){ Text ( TextWith80dpOnlyLeftPadding ) } Column ( LayoutPadding ( all = 80. dp )){ Text ( TextWith80dpPadding ) } } }","title":"LayoutPadding"},{"location":"layout/row/","text":"Row A Row will show each children next to the previous children. It similar to a LinearLayout with horizontal orientation. @Composable fun RowExample () { Row { Text ( Hello World! ) Text ( Hello World!2 ) } }","title":"Row"},{"location":"layout/row/#row","text":"A Row will show each children next to the previous children. It similar to a LinearLayout with horizontal orientation. @Composable fun RowExample () { Row { Text ( Hello World! ) Text ( Hello World!2 ) } }","title":"Row"},{"location":"layout/stack/","text":"Stack The children of the Stack layout will be stacked over each other. You can use the LayoutGravity modifier to specify where the composable should be drawn. Info This is the API of version dev06. Newer versions may have a different one @Composable fun StackExample () { Stack () { Text ( This text is drawed first , modifier = LayoutGravity . TopCenter ) Box ( LayoutGravity . TopCenter + LayoutHeight . Fill + LayoutWidth ( 50. dp ), backgroundColor = Color . Blue ) Text ( This text is drawed last , modifier = LayoutGravity . Center ) FloatingActionButton ( text = + , color = Color . Blue , modifier = LayoutGravity . BottomEnd + LayoutPadding ( 12. dp ) ) } }","title":"Stack"},{"location":"layout/stack/#stack","text":"The children of the Stack layout will be stacked over each other. You can use the LayoutGravity modifier to specify where the composable should be drawn. Info This is the API of version dev06. Newer versions may have a different one @Composable fun StackExample () { Stack () { Text ( This text is drawed first , modifier = LayoutGravity . TopCenter ) Box ( LayoutGravity . TopCenter + LayoutHeight . Fill + LayoutWidth ( 50. dp ), backgroundColor = Color . Blue ) Text ( This text is drawed last , modifier = LayoutGravity . Center ) FloatingActionButton ( text = + , color = Color . Blue , modifier = LayoutGravity . BottomEnd + LayoutPadding ( 12. dp ) ) } }","title":"Stack"},{"location":"material/alertdialog/","text":"Info This is the API of version dev06. Newer versions may have a different one @Composable fun AlertDialogSample () { MaterialTheme { Column { val openDialog = state { false } Button ( onClick = { openDialog . value = true }){ Text ( Click me ) } if ( openDialog . value ) { AlertDialog ( onCloseRequest = { openDialog . value = false }, title = { Text ( Dialog Title ) }, text = { Text ( Here is a text ) }, confirmButton = { Button ( onClick = { openDialog . value = false }){ Text ( This is the Confirm Button ) } }, dismissButton = { Button ( onClick = { openDialog . value = false }){ Text ( This is the dismiss Button ) } }, buttonLayout = AlertDialogButtonLayout . Stacked ) } } } }","title":"AlertDialog"},{"location":"material/button/","text":"Button A Button has a onClick-Function. You can not set text as an argument. But you can add a Text-Composable or other composables as child elements of the Button. @Composable fun ButtonExample () { Button ( onClick = { /* Do something! */ }, backgroundColor = Color . Red ) { Text ( Button ) } }","title":"Button"},{"location":"material/button/#button","text":"A Button has a onClick-Function. You can not set text as an argument. But you can add a Text-Composable or other composables as child elements of the Button. @Composable fun ButtonExample () { Button ( onClick = { /* Do something! */ }, backgroundColor = Color . Red ) { Text ( Button ) } }","title":"Button"},{"location":"material/checkbox/","text":"Info This is the API of version dev06. Newer versions may have a different one @Composable fun CheckBoxDemo () { val checkedState = state { true } Checkbox ( checked = checkedState . value , onCheckedChange = { checkedState . value = it } ) }","title":"Checkbox"},{"location":"material/modaldrawer/","text":"ModalDrawerLayout Info This is the API of version dev06. Newer versions may have a different one With a ModalDrawerLayout you can create a navigation drawer. You can define a drawer state and an onStateChange function. You define the content of the drawer with drawerContent and the rest of your layout in bodyContent @Composable fun ModalDrawerLayoutSample () { val ( state , onStateChange ) = state { DrawerState . Closed } ModalDrawerLayout ( drawerState = state , onStateChange = onStateChange , drawerContent = { Column { Text ( Text in Drawer ) Button ( onClick = { onStateChange ( DrawerState . Closed ) }) { Text ( Close Drawer ) } } }, bodyContent = { Column { Text ( Text in Bodycontext ) Button ( onClick = { onStateChange ( DrawerState . Opened ) }) { Text ( Click to open ) } } } ) }","title":"ModalDrawerLayout"},{"location":"material/modaldrawer/#modaldrawerlayout","text":"Info This is the API of version dev06. Newer versions may have a different one With a ModalDrawerLayout you can create a navigation drawer. You can define a drawer state and an onStateChange function. You define the content of the drawer with drawerContent and the rest of your layout in bodyContent @Composable fun ModalDrawerLayoutSample () { val ( state , onStateChange ) = state { DrawerState . Closed } ModalDrawerLayout ( drawerState = state , onStateChange = onStateChange , drawerContent = { Column { Text ( Text in Drawer ) Button ( onClick = { onStateChange ( DrawerState . Closed ) }) { Text ( Close Drawer ) } } }, bodyContent = { Column { Text ( Text in Bodycontext ) Button ( onClick = { onStateChange ( DrawerState . Opened ) }) { Text ( Click to open ) } } } ) }","title":"ModalDrawerLayout"},{"location":"material/radiogroup/","text":"Info This is the API of version dev04. Newer versions may have a different one @Composable fun RadioGroupSample () { val radioOptions = listOf ( A , B , C ) val ( selectedOption , onOptionSelected ) = state { radioOptions [ 1 ] } RadioGroup ( options = radioOptions , selectedOption = selectedOption , onSelectedChange = onOptionSelected ) }","title":"RadioGroup"},{"location":"material/switch/","text":"Info This is the API of version dev06. Newer versions may have a different one @Composable fun SwitchDemo () { val checkedState = state { true } Switch ( checked = checkedState . value , onCheckedChange = { checkedState . value = it } ) }","title":"Switch"}]}
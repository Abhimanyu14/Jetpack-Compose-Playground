{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jetpack Compose Playground \u00b6 Show some and star the repo to support the project \u00b6 Introduction \u00b6 This is a collection of Jetpack Compose examples/tutorials and demos. What is Jetpack Compose? \u00b6 \u201d Jetpack Compose is a modern toolkit for building native Android UI. Jetpack Compose simplifies and accelerates UI development on Android with less code, powerful tools, and intuitive Kotlin APIs. \u201c Composable of the week!! \ud83c\udf89 \u00b6 The AdapterList Layouts \u00b6 ConstraintLayout Scaffold Column Row Stack LayoutPadding New to Compose? \u00b6 Check Project Setup or Hello World Compose Looking for tutorials/sample code \u00b6 Take a look at the sidebar under \u201cGuides & Samples\u201d or check Compose projects Contributing \u00b6 Interested in adding samples/tutorials? Check Contributing \ud83d\udcdc License \u00b6 This project is licensed under the MIT License - see the LICENSE.md file for details","title":"Overview"},{"location":"#jetpack-compose-playground","text":"","title":"Jetpack Compose Playground"},{"location":"#show-some-and-star-the-repo-to-support-the-project","text":"","title":"Show some  and star the repo to support the project"},{"location":"#introduction","text":"This is a collection of Jetpack Compose examples/tutorials and demos.","title":"Introduction"},{"location":"#what-is-jetpack-compose","text":"\u201d Jetpack Compose is a modern toolkit for building native Android UI. Jetpack Compose simplifies and accelerates UI development on Android with less code, powerful tools, and intuitive Kotlin APIs. \u201c","title":"What is Jetpack Compose?"},{"location":"#composable-of-the-week","text":"The AdapterList","title":"Composable of the week!! \ud83c\udf89"},{"location":"#layouts","text":"ConstraintLayout Scaffold Column Row Stack LayoutPadding","title":"Layouts"},{"location":"#new-to-compose","text":"Check Project Setup or Hello World Compose","title":"New to Compose?"},{"location":"#looking-for-tutorialssample-code","text":"Take a look at the sidebar under \u201cGuides & Samples\u201d or check Compose projects","title":"Looking for tutorials/sample code"},{"location":"#contributing","text":"Interested in adding samples/tutorials? Check Contributing","title":"Contributing"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"\ud83d\udcdc License"},{"location":"community/","text":"Community \u00b6 Slack Bugtracker https://issuetracker.google.com/issues/new?component=612128 Stackoverflow","title":"Community"},{"location":"community/#community","text":"Slack Bugtracker https://issuetracker.google.com/issues/new?component=612128 Stackoverflow","title":"Community"},{"location":"compose_projects/","text":"Compose Projects \u00b6 A list of projects that are related to Jetpack Compose. If you want to add an entry, please edit the table and send PR. Example Apps \u00b6 Name Description Jetpack Compose Playground Collection of Jetpack Compose example code . Compose Pokedex Pokedex on Jetpack Compose. Compose Samples Repository This repository contains a set of individual Android Studio projects to help you learn about Compose in Android. PeopleInSpace Minimal Kotlin Multiplatform project using Jetpack Compose and SwiftUI ComposeClock Particle clock created with Jetpack Compose framework JetDelivery JetDelivery is a sample food delivery app, built with Jetpack Compose. Learn Jetpack Compose By Example This project contains various examples that show how you would do things the \u201cJetpack Compose\u201d way Libraries \u00b6 Name Description Compose Router Routing functionality for Jetpack Compose with back stack Compose Glide Image Simple Glide library adaptation for Jetpack Compose. Compose Navigation Compose Backstack Simple composable for rendering transitions between backstacks. SwipeReveal-Compose A layout that you can swipe to show action buttons.","title":"Compose Projects"},{"location":"compose_projects/#compose-projects","text":"A list of projects that are related to Jetpack Compose. If you want to add an entry, please edit the table and send PR.","title":"Compose Projects"},{"location":"compose_projects/#example-apps","text":"Name Description Jetpack Compose Playground Collection of Jetpack Compose example code . Compose Pokedex Pokedex on Jetpack Compose. Compose Samples Repository This repository contains a set of individual Android Studio projects to help you learn about Compose in Android. PeopleInSpace Minimal Kotlin Multiplatform project using Jetpack Compose and SwiftUI ComposeClock Particle clock created with Jetpack Compose framework JetDelivery JetDelivery is a sample food delivery app, built with Jetpack Compose. Learn Jetpack Compose By Example This project contains various examples that show how you would do things the \u201cJetpack Compose\u201d way","title":"Example Apps"},{"location":"compose_projects/#libraries","text":"Name Description Compose Router Routing functionality for Jetpack Compose with back stack Compose Glide Image Simple Glide library adaptation for Jetpack Compose. Compose Navigation Compose Backstack Simple composable for rendering transitions between backstacks. SwipeReveal-Compose A layout that you can swipe to show action buttons.","title":"Libraries"},{"location":"contributing/","text":"Contributing \u00b6 to Jetpack Compose \u00b6 If you want to improve Compose, join the Kotlin Slack and the #compose channel or file a bug at https://issuetracker.google.com/issues?q=componentid:612128 to this project \u00b6 This project is using MkDocs to generate the pages for Github. The markdown files are located in /mkdocs . The generated files for the github page are in /docs . Do not make changes in this folder, they will be overriden Run docs locally To start the mkdocs server locally, run mkdocs serve in a terminal in the project folder. Add/Change docs The docs are written in markdown files which are all in /mkdocs . To change the navigation sidebar, you need to edit the mkdocs.yml. When you run mkdocs build in a terminal in the project folder, the html files be generated to /docs Feel free to change/add files and send a pull request.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#to-jetpack-compose","text":"If you want to improve Compose, join the Kotlin Slack and the #compose channel or file a bug at https://issuetracker.google.com/issues?q=componentid:612128","title":"to Jetpack Compose"},{"location":"contributing/#to-this-project","text":"This project is using MkDocs to generate the pages for Github. The markdown files are located in /mkdocs . The generated files for the github page are in /docs . Do not make changes in this folder, they will be overriden Run docs locally To start the mkdocs server locally, run mkdocs serve in a terminal in the project folder. Add/Change docs The docs are written in markdown files which are all in /mkdocs . To change the navigation sidebar, you need to edit the mkdocs.yml. When you run mkdocs build in a terminal in the project folder, the html files be generated to /docs Feel free to change/add files and send a pull request.","title":"to this project"},{"location":"resources/","text":"Resources \u00b6 Content \u00b6 Official Documentation Other Documentation Conference talks Articles SpeakerDeck Podcasts Tutorials Extras Official Documentation \u00b6 Jetpack compose Jetpack compose Readme Other Documentation \u00b6 FAQ about Jetpack Compose \u2013 Android\u2019s modern toolkit for building native UI This Wiki Conference Talks \u00b6 Android Developers Backstage : Episode 131: Jetpack Compose and Declarative UIs KotlinConf 2019: The Compose Runtime, Demystified by Leland Richardson KotlinConf 2019: Compose Yourself: Designing a Kotlin First UI Toolkit by Anna-Chiara & Clara What\u2019s New in Jetpack Compose (Android Dev Summit \u201819) Understanding Compose (Android Dev Summit \u201819) #AskAndroid at Android Dev Summit 2019 - Jetpack Compose Google IO19 - Declarative UI patterns DroidconBerlin - Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android DroidconBerlin - Jumping into Jetpack Compose way too early to see what\u2019s inside KotlinEverywhere - Jetpack Compose DevFest Kolkata 2019 - Let\u2019s Talk Composing UI Articles \u00b6 Diving into Jetpack Compose Compose From First Principles Writing Android UI Code in Jetpack Compose (1 of 2) Jetpack Compose: Optimism and Opportunity Android Jetpack Compose Review SwiftUI vs. Jetpack Compose Android Jetpack Compose First Impression SpeakerDeck \u00b6 Jetpack @Compose Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android Shifting Paradigms Podcasts \u00b6 Android Developer backstage - Episode 115: Jetpack Compose Fragmented Podcast - Episode 171: Jetpack Compose with Leland Richardson Google podcast - Romain Guy \u2013 Podcast S09 E09 Tutorials \u00b6 Raywenderlich - Jetpack Compose Primer Extras \u00b6 Video - Kotlin and Jetpack Compose #compose channel on Kotlin Slack Feel free to contribute! What is Jetpack Compose \u00b6 Links: * Jetpack Compose Tutorial Compose Readme Compose from first Principles AndroidX Git Compose: https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/ Compse UI Docu: https://developer.android.com/reference/kotlin/androidx/ui/packages https://developer.android.com/jetpack/compose/setup https://developer.android.com/jetpack/compose Release Notes: https://developer.android.com/jetpack/androidx/releases/ui","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#content","text":"Official Documentation Other Documentation Conference talks Articles SpeakerDeck Podcasts Tutorials Extras","title":"Content"},{"location":"resources/#official-documentation","text":"Jetpack compose Jetpack compose Readme","title":"Official Documentation"},{"location":"resources/#other-documentation","text":"FAQ about Jetpack Compose \u2013 Android\u2019s modern toolkit for building native UI This Wiki","title":"Other Documentation"},{"location":"resources/#conference-talks","text":"Android Developers Backstage : Episode 131: Jetpack Compose and Declarative UIs KotlinConf 2019: The Compose Runtime, Demystified by Leland Richardson KotlinConf 2019: Compose Yourself: Designing a Kotlin First UI Toolkit by Anna-Chiara & Clara What\u2019s New in Jetpack Compose (Android Dev Summit \u201819) Understanding Compose (Android Dev Summit \u201819) #AskAndroid at Android Dev Summit 2019 - Jetpack Compose Google IO19 - Declarative UI patterns DroidconBerlin - Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android DroidconBerlin - Jumping into Jetpack Compose way too early to see what\u2019s inside KotlinEverywhere - Jetpack Compose DevFest Kolkata 2019 - Let\u2019s Talk Composing UI","title":"Conference Talks"},{"location":"resources/#articles","text":"Diving into Jetpack Compose Compose From First Principles Writing Android UI Code in Jetpack Compose (1 of 2) Jetpack Compose: Optimism and Opportunity Android Jetpack Compose Review SwiftUI vs. Jetpack Compose Android Jetpack Compose First Impression","title":"Articles"},{"location":"resources/#speakerdeck","text":"Jetpack @Compose Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android Shifting Paradigms","title":"SpeakerDeck"},{"location":"resources/#podcasts","text":"Android Developer backstage - Episode 115: Jetpack Compose Fragmented Podcast - Episode 171: Jetpack Compose with Leland Richardson Google podcast - Romain Guy \u2013 Podcast S09 E09","title":"Podcasts"},{"location":"resources/#tutorials","text":"Raywenderlich - Jetpack Compose Primer","title":"Tutorials"},{"location":"resources/#extras","text":"Video - Kotlin and Jetpack Compose #compose channel on Kotlin Slack Feel free to contribute!","title":"Extras"},{"location":"resources/#what-is-jetpack-compose","text":"Links: * Jetpack Compose Tutorial Compose Readme Compose from first Principles AndroidX Git Compose: https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/ Compse UI Docu: https://developer.android.com/reference/kotlin/androidx/ui/packages https://developer.android.com/jetpack/compose/setup https://developer.android.com/jetpack/compose Release Notes: https://developer.android.com/jetpack/androidx/releases/ui","title":"What is Jetpack Compose"},{"location":"compose/recompose/","text":"Recompose \u00b6 You can use Recompose when you need to manually trigger an recomposition/update of a part of your composable tree. Wrap Recompose around the part where you need the functionality. When you execute the recompose function, the whole code inside Recompose will be rendered again. @Composable fun recomposeDemo () { var countState = 0 Recompose { recompose -> Column { Text ( \"CountState is: \" + countState ) Button ( onClick = { countState ++ }) { Text ( \"Count up\" ) } Button ( onClick = { recompose () }) { Text ( \"I want to recompose\" ) } } } } Example \u00b6 The UI in the recomposeDemo consists of 3 Elements. A Text with the counterstate, a button which will increment the counterstate and a button to recompose the UI. On a click on the \u201cCount up\u201d-Button, the value of countState will go up, but the Text will not be updated. This is because countState is usual Int and not an State <Int> . When the recompose button gets clicked, the Column inside Recompose will be rendered again. This time with the updated value of countState.","title":"Recompose"},{"location":"compose/recompose/#recompose","text":"You can use Recompose when you need to manually trigger an recomposition/update of a part of your composable tree. Wrap Recompose around the part where you need the functionality. When you execute the recompose function, the whole code inside Recompose will be rendered again. @Composable fun recomposeDemo () { var countState = 0 Recompose { recompose -> Column { Text ( \"CountState is: \" + countState ) Button ( onClick = { countState ++ }) { Text ( \"Count up\" ) } Button ( onClick = { recompose () }) { Text ( \"I want to recompose\" ) } } } }","title":"Recompose"},{"location":"compose/recompose/#example","text":"The UI in the recomposeDemo consists of 3 Elements. A Text with the counterstate, a button which will increment the counterstate and a button to recompose the UI. On a click on the \u201cCount up\u201d-Button, the value of countState will go up, but the Text will not be updated. This is because countState is usual Int and not an State <Int> . When the recompose button gets clicked, the Column inside Recompose will be rendered again. This time with the updated value of countState.","title":"Example"},{"location":"compose_for/android_devs/","text":"Compose for Android Developers \u00b6 This page is inspired by https://flutter.dev/docs/get-started/flutter-for/android-devs . The goal is to show how common use cases with the classic Android View system, can be done with Compose. Layouts \u00b6 What is the equivalent of a LinearLayout? \u00b6 In Android, a LinearLayout is used to lay your widgets out linearly\u2014either horizontally or vertically. With Compose, use the Row or Column composable to achieve the same result. If you notice the two code samples are identical with the exception of the \u201cRow\u201d and \u201cColumn\u201d composable. The children are the same and this feature can be exploited to develop rich layouts that can change overtime with the same children. @Composable fun Example () { Row { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } @Composable fun Example () { Column { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } What is the equivalent of a RelativeLayout? \u00b6 A RelativeLayout lays your widgets out relative to each other. In Compose, there are a few ways to achieve the same result. You can achieve the result of a RelativeLayout by using a combination of Column, Row, and Stack widgets What is the equivalent of a ScrollView? \u00b6 In Android, use a ScrollView to lay out your widgets\u2014if the user\u2019s device has a smaller screen than your content, it scrolls. In Compose, you can use a VerticalScroller. @Composable fun VerticalScrollerExample () { VerticalScroller { //Only one child is allowed in a VerticalScroller Column { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } } Working with Text \u00b6 What is the equivalent of a TextView? \u00b6 In Compose you can use a Text to display text What is the equivalent of a EditText? \u00b6 The EditText is the standard text entry view in the Android View system. If the user needs to enter text into an app, this is the primary way for them to do that. In Compose you can use TextField","title":"Compose for Android Developers"},{"location":"compose_for/android_devs/#compose-for-android-developers","text":"This page is inspired by https://flutter.dev/docs/get-started/flutter-for/android-devs . The goal is to show how common use cases with the classic Android View system, can be done with Compose.","title":"Compose for Android Developers"},{"location":"compose_for/android_devs/#layouts","text":"","title":"Layouts"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-linearlayout","text":"In Android, a LinearLayout is used to lay your widgets out linearly\u2014either horizontally or vertically. With Compose, use the Row or Column composable to achieve the same result. If you notice the two code samples are identical with the exception of the \u201cRow\u201d and \u201cColumn\u201d composable. The children are the same and this feature can be exploited to develop rich layouts that can change overtime with the same children. @Composable fun Example () { Row { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } @Composable fun Example () { Column { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } }","title":"What is the equivalent of a LinearLayout?"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-relativelayout","text":"A RelativeLayout lays your widgets out relative to each other. In Compose, there are a few ways to achieve the same result. You can achieve the result of a RelativeLayout by using a combination of Column, Row, and Stack widgets","title":"What is the equivalent of a RelativeLayout?"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-scrollview","text":"In Android, use a ScrollView to lay out your widgets\u2014if the user\u2019s device has a smaller screen than your content, it scrolls. In Compose, you can use a VerticalScroller. @Composable fun VerticalScrollerExample () { VerticalScroller { //Only one child is allowed in a VerticalScroller Column { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } }","title":"What is the equivalent of a ScrollView?"},{"location":"compose_for/android_devs/#working-with-text","text":"","title":"Working with Text"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-textview","text":"In Compose you can use a Text to display text","title":"What is the equivalent of a TextView?"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-edittext","text":"The EditText is the standard text entry view in the Android View system. If the user needs to enter text into an app, this is the primary way for them to do that. In Compose you can use TextField","title":"What is the equivalent of a EditText?"},{"location":"cookbook/hint_edit_text/","text":"How to show hint with underline in a TextField \u00b6 Info This is the API of version dev08. Newer versions may have a different one We have all used EditText in classic Android development. It has lots of features like hint showing or default underline background. In Jetpack compose it\u2019s name is TextField and we set up it like that. Create TextField \u00b6 val state = state { \"\" } TextField ( value = state . value , modifier = modifier , onValueChange = { state . value = it }, textStyle = yourTextStyle ) With textStyle parameter you can change your TextField\u2019s font, font size, color and many other things, but there are something that its missing, you cant quite set its PlaceHolder text(Hint). So how can we do that? If you think about that hint\u2019s only purpose is to be shown when TextField is empty and be hidden when we are starting to type something in TextField. So we need two views one Text for hint showing and one TextField. They must have same location on the screen so it will look like same component. So without further ado let\u2019s start implementing it. Create HintTextField \u00b6 @Composable fun HintEditText ( hintText : String = \"\" , modifier : Modifier = Modifier . None , textStyle : TextStyle = currentTextStyle () ) { val state = state { \"\" } val inputField = @Composable { TextField ( value = state . value , modifier = modifier , onValueChange = { state . value = it }, textStyle = textStyle . merge ( TextStyle ( textDecoration = TextDecoration . None )) ) } Layout ( children = @Composable { inputField () Text ( text = hintText , modifier = modifier , style = textStyle . merge ( TextStyle ( color = Color . Gray )) ) Divider ( color = Color . Black , height = 2. dp ) }, measureBlock = { measurables : List < Measurable >, constraints : Constraints , _ -> val inputFieldPlace = measurables [ 0 ]. measure ( constraints ) val hintEditPlace = measurables [ 1 ]. measure ( constraints ) val dividerEditPlace = measurables [ 2 ]. measure ( Constraints ( constraints . minWidth , constraints . maxWidth , 2. ipx , 2. ipx ) ) layout ( inputFieldPlace . width , inputFieldPlace . height + dividerEditPlace . height ) { inputFieldPlace . place ( 0. ipx , 0. ipx ) if ( state . value . isEmpty ()) hintEditPlace . place ( 0. ipx , 0. ipx ) dividerEditPlace . place ( 0. ipx , inputFieldPlace . height ) } }) } Seems like lots of code for simple functional, doesn\u2019t it? Let\u2019s describe whats happening from the function declaration. It has three function parameters and they are pretty self-explanatory. As second part we are creating TextField lambda and passing it in Layout Composable function, with our HintText and Divider, which as you might have guessed will create underline background. Now it\u2019s time to decide where we are going to put our HintTextField. First of all we need to measure our views and measureBlock will help us do that. Measurables list will contain three items(Our TextField, HintText and Divider) as Measurable type, we need to call measure on all of list items and pass constraints in it. Constraints is a class which only has four properties(minWidth, maxWidth, minHeight, maxHeight). We can pass constraints which is given to us by measuring @Composable children lambda, which works with our TextField and HintText because we want them to have same size as it\u2019s parent, but when it comes to underline background we need it to stay as thin as possible. Now we are measuring our HintTextField one more time and placing it\u2019s children on some (x, y). One last thing to realize is that if our state value is not empty we don\u2019t place our HintText at all!","title":"How to create HintTextField"},{"location":"cookbook/hint_edit_text/#how-to-show-hint-with-underline-in-a-textfield","text":"Info This is the API of version dev08. Newer versions may have a different one We have all used EditText in classic Android development. It has lots of features like hint showing or default underline background. In Jetpack compose it\u2019s name is TextField and we set up it like that.","title":"How to show hint with underline in a TextField"},{"location":"cookbook/hint_edit_text/#create-textfield","text":"val state = state { \"\" } TextField ( value = state . value , modifier = modifier , onValueChange = { state . value = it }, textStyle = yourTextStyle ) With textStyle parameter you can change your TextField\u2019s font, font size, color and many other things, but there are something that its missing, you cant quite set its PlaceHolder text(Hint). So how can we do that? If you think about that hint\u2019s only purpose is to be shown when TextField is empty and be hidden when we are starting to type something in TextField. So we need two views one Text for hint showing and one TextField. They must have same location on the screen so it will look like same component. So without further ado let\u2019s start implementing it.","title":"Create TextField"},{"location":"cookbook/hint_edit_text/#create-hinttextfield","text":"@Composable fun HintEditText ( hintText : String = \"\" , modifier : Modifier = Modifier . None , textStyle : TextStyle = currentTextStyle () ) { val state = state { \"\" } val inputField = @Composable { TextField ( value = state . value , modifier = modifier , onValueChange = { state . value = it }, textStyle = textStyle . merge ( TextStyle ( textDecoration = TextDecoration . None )) ) } Layout ( children = @Composable { inputField () Text ( text = hintText , modifier = modifier , style = textStyle . merge ( TextStyle ( color = Color . Gray )) ) Divider ( color = Color . Black , height = 2. dp ) }, measureBlock = { measurables : List < Measurable >, constraints : Constraints , _ -> val inputFieldPlace = measurables [ 0 ]. measure ( constraints ) val hintEditPlace = measurables [ 1 ]. measure ( constraints ) val dividerEditPlace = measurables [ 2 ]. measure ( Constraints ( constraints . minWidth , constraints . maxWidth , 2. ipx , 2. ipx ) ) layout ( inputFieldPlace . width , inputFieldPlace . height + dividerEditPlace . height ) { inputFieldPlace . place ( 0. ipx , 0. ipx ) if ( state . value . isEmpty ()) hintEditPlace . place ( 0. ipx , 0. ipx ) dividerEditPlace . place ( 0. ipx , inputFieldPlace . height ) } }) } Seems like lots of code for simple functional, doesn\u2019t it? Let\u2019s describe whats happening from the function declaration. It has three function parameters and they are pretty self-explanatory. As second part we are creating TextField lambda and passing it in Layout Composable function, with our HintText and Divider, which as you might have guessed will create underline background. Now it\u2019s time to decide where we are going to put our HintTextField. First of all we need to measure our views and measureBlock will help us do that. Measurables list will contain three items(Our TextField, HintText and Divider) as Measurable type, we need to call measure on all of list items and pass constraints in it. Constraints is a class which only has four properties(minWidth, maxWidth, minHeight, maxHeight). We can pass constraints which is given to us by measuring @Composable children lambda, which works with our TextField and HintText because we want them to have same size as it\u2019s parent, but when it comes to underline background we need it to stay as thin as possible. Now we are measuring our HintTextField one more time and placing it\u2019s children on some (x, y). One last thing to realize is that if our state value is not empty we don\u2019t place our HintText at all!","title":"Create HintTextField"},{"location":"cookbook/how_to_use_compose_in_viewgroup/","text":"How to use Compose in a ViewGroup \u00b6 Info This is the API of version dev08. Newer versions may have a different one Compose has a setContent() -extension function on ViewGroup which can be used, to use Compose inside a ViewGroup. This example will show you, how you can use Compose inside a FrameLayout. It should also work in other layouts like LinearLayout. As long as it\u2019s a layout that extends the ViewGroup class. //Extension function from Compose fun ViewGroup . setContent ( content : @Composable () () -> Unit ): Composition { val composeView = if ( childCount > 0 ) { getChildAt ( 0 ) as ? Owner } else { removeAllViews (); null } ?: createOwner ( context ). also { addView ( it . view ) } return doSetContent ( composeView , context , content ) } Create a custom FrameLayout \u00b6 Create a custom FrameLayout, then you can use the setContent() for example inside init() . Inside setContent() you can then add your Compose code. class ComposeFrameLayout @JvmOverloads constructor ( context : Context , attrs : AttributeSet ? = null , defStyleAttr : Int = 0 ) : FrameLayout ( context , attrs , defStyleAttr ) { init { setContent { Button ( onClick = {}) { Text ( \"ComposeButton\" ) } } } } Add it to your layout file \u00b6 Just add your FrameLayout like any other layout. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:id= \"@+id/container\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" tools:context= \".MainActivity\" > <de.jensklingenberg.jetpackcomposeplayground.ui.ComposeFrameLayout android:id= \"@+id/composeFrame\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:orientation= \"horizontal\" /> <Button android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"WidgetButton\" /> </LinearLayout>","title":"How to use Compose in a ViewGroup"},{"location":"cookbook/how_to_use_compose_in_viewgroup/#how-to-use-compose-in-a-viewgroup","text":"Info This is the API of version dev08. Newer versions may have a different one Compose has a setContent() -extension function on ViewGroup which can be used, to use Compose inside a ViewGroup. This example will show you, how you can use Compose inside a FrameLayout. It should also work in other layouts like LinearLayout. As long as it\u2019s a layout that extends the ViewGroup class. //Extension function from Compose fun ViewGroup . setContent ( content : @Composable () () -> Unit ): Composition { val composeView = if ( childCount > 0 ) { getChildAt ( 0 ) as ? Owner } else { removeAllViews (); null } ?: createOwner ( context ). also { addView ( it . view ) } return doSetContent ( composeView , context , content ) }","title":"How to use Compose in a ViewGroup"},{"location":"cookbook/how_to_use_compose_in_viewgroup/#create-a-custom-framelayout","text":"Create a custom FrameLayout, then you can use the setContent() for example inside init() . Inside setContent() you can then add your Compose code. class ComposeFrameLayout @JvmOverloads constructor ( context : Context , attrs : AttributeSet ? = null , defStyleAttr : Int = 0 ) : FrameLayout ( context , attrs , defStyleAttr ) { init { setContent { Button ( onClick = {}) { Text ( \"ComposeButton\" ) } } } }","title":"Create a custom FrameLayout"},{"location":"cookbook/how_to_use_compose_in_viewgroup/#add-it-to-your-layout-file","text":"Just add your FrameLayout like any other layout. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:id= \"@+id/container\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" tools:context= \".MainActivity\" > <de.jensklingenberg.jetpackcomposeplayground.ui.ComposeFrameLayout android:id= \"@+id/composeFrame\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:orientation= \"horizontal\" /> <Button android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"WidgetButton\" /> </LinearLayout>","title":"Add it to your layout file"},{"location":"cookbook/overview/","text":"Cookbook \u00b6 Forms \u00b6 Handle changes to a TextField How to use Compose in a ViewGroup","title":"Overview"},{"location":"cookbook/overview/#cookbook","text":"","title":"Cookbook"},{"location":"cookbook/overview/#forms","text":"Handle changes to a TextField How to use Compose in a ViewGroup","title":"Forms"},{"location":"cookbook/textfield_changes/","text":"Handle changes to a TextField \u00b6 In some cases, it\u2019s useful to get the value of a textfield every time the text in a text field changes. For example, you might want to build a search screen with autocomplete functionality where you want to update the results as the user types. With Compose you have the following options: 1) Supply an onValueChange() callback to a TextField \u00b6 @Composable fun HandleTextFieldChanges () { Column { val state = state { \"\" } TextField ( value = state . value , onValueChange = { state . value = it } ) Text ( \"The textfield has this text: \" + state . value ) } } The simplest approach is to supply an onValueChange() callback to a TextField. Whenever the text changes, the callback is invoked. In this example, every time the TextField changes, the new text value will be saved in a state and set to the TextField and the Text.","title":"Handle changes to a text field"},{"location":"cookbook/textfield_changes/#handle-changes-to-a-textfield","text":"In some cases, it\u2019s useful to get the value of a textfield every time the text in a text field changes. For example, you might want to build a search screen with autocomplete functionality where you want to update the results as the user types. With Compose you have the following options:","title":"Handle changes to a TextField"},{"location":"cookbook/textfield_changes/#1-supply-an-onvaluechange-callback-to-a-textfield","text":"@Composable fun HandleTextFieldChanges () { Column { val state = state { \"\" } TextField ( value = state . value , onValueChange = { state . value = it } ) Text ( \"The textfield has this text: \" + state . value ) } } The simplest approach is to supply an onValueChange() callback to a TextField. Whenever the text changes, the callback is invoked. In this example, every time the TextField changes, the new text value will be saved in a state and set to the TextField and the Text.","title":"1) Supply an onValueChange() callback to a TextField"},{"location":"core/layoutpadding/","text":"LayoutPadding \u00b6 Info This is the API of version dev08. Newer versions may have a different one You can use Modifier.padding to set padding to composables that take a modifier as an argument. @Composable fun PaddingDemo () { Column { Text ( \"TextWithoutPadding\" ) Column ( modifier = Modifier . padding ( start = 80. dp )){ Text ( \"TextWith80dpOnlyLeftPadding\" ) } Column ( Modifier . padding ( all = 80. dp )){ Text ( \"TextWith80dpPadding\" ) } } }","title":"LayoutPadding"},{"location":"core/layoutpadding/#layoutpadding","text":"Info This is the API of version dev08. Newer versions may have a different one You can use Modifier.padding to set padding to composables that take a modifier as an argument. @Composable fun PaddingDemo () { Column { Text ( \"TextWithoutPadding\" ) Column ( modifier = Modifier . padding ( start = 80. dp )){ Text ( \"TextWith80dpOnlyLeftPadding\" ) } Column ( Modifier . padding ( all = 80. dp )){ Text ( \"TextWith80dpPadding\" ) } } }","title":"LayoutPadding"},{"location":"core/pressgesturedetector/","text":"You can use a PressGestureDetector to detect when a compose element gets pressed and released. @Composable fun PressGestureDetectorDemo () { val posX = state { 0f } val posXY = state { 0f } val clickState = state { \"\" } Column ( modifier = LayoutWidth . Fill + LayoutHeight . Fill , arrangement = Arrangement . Center ) { PressGestureDetector ( onPress = { position -> posX . value = position . x . value posXY . value = position . y . value clickState . value = \"Pressed\" }, onRelease = { clickState . value = \"Released\" }) { Column ( modifier = LayoutWidth . Fill + LayoutHeight . Fill , arrangement = Arrangement . Center ) { Text ( \"ClickState: \" + clickState . value ) Text ( \"PostitionX: ${posX.value}\" ) Text ( \"PostitionY: ${posXY.value}\" ) } } } }","title":"PressGestureDetector"},{"location":"foundation/adapter_list/","text":"AdapterList \u00b6 Info This is the API of version dev07. Newer versions may have a different one A AdapterList is a vertically scrolling list that only composes and lays out the currently visible items. @Composable fun AdapterListDemo () { AdapterList ( data = listOf ( \"A\" , \"B\" , \"C\" , \"D\" )+(( 0. . 100 ). map { it . toString () }), modifier = Modifier . None , itemCallback = { item -> Log . d ( \"COMPOSE\" , \"This get rendered $item\" ) when ( item ) { \"A\" -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } \"B\" -> { Button ( onClick = {}) { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } \"C\" -> { //Do Nothing } \"D\" -> { Text ( text = item ) } else -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } } ) } data \u00b6 This is the data of items that should be displayed. It expects a List of T modifier \u00b6 Here you can specify some modifiers itemCallback \u00b6 This will be called every time a item from the data -List gets visible. Then you can create your composable that should be displayed.","title":"AdapterList"},{"location":"foundation/adapter_list/#adapterlist","text":"Info This is the API of version dev07. Newer versions may have a different one A AdapterList is a vertically scrolling list that only composes and lays out the currently visible items. @Composable fun AdapterListDemo () { AdapterList ( data = listOf ( \"A\" , \"B\" , \"C\" , \"D\" )+(( 0. . 100 ). map { it . toString () }), modifier = Modifier . None , itemCallback = { item -> Log . d ( \"COMPOSE\" , \"This get rendered $item\" ) when ( item ) { \"A\" -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } \"B\" -> { Button ( onClick = {}) { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } \"C\" -> { //Do Nothing } \"D\" -> { Text ( text = item ) } else -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } } ) }","title":"AdapterList"},{"location":"foundation/adapter_list/#data","text":"This is the data of items that should be displayed. It expects a List of T","title":"data"},{"location":"foundation/adapter_list/#modifier","text":"Here you can specify some modifiers","title":"modifier"},{"location":"foundation/adapter_list/#itemcallback","text":"This will be called every time a item from the data -List gets visible. Then you can create your composable that should be displayed.","title":"itemCallback"},{"location":"foundation/clickable/","text":"Clickable \u00b6 Info This is the API of version dev06. Newer versions may have a different one Childrens of Clickable will become clickable https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#clickable @Composable fun ClickableSample () { val count = state { 0 } Clickable ( onClick = { count . value += 1 }) { // content that you want to make clickable Text ( \"You have clicked this text: \" + count . value . toString ()) } }","title":"Clickable"},{"location":"foundation/clickable/#clickable","text":"Info This is the API of version dev06. Newer versions may have a different one Childrens of Clickable will become clickable https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#clickable @Composable fun ClickableSample () { val count = state { 0 } Clickable ( onClick = { count . value += 1 }) { // content that you want to make clickable Text ( \"You have clicked this text: \" + count . value . toString ()) } }","title":"Clickable"},{"location":"foundation/draggable/","text":"Draggable \u00b6 https://developer.android.com/reference/kotlin/androidx/ui/foundation/gestures/package-summary#draggable @Composable fun DraggableDemo (){ val max = 300. dp val min = 0. dp val ( minPx , maxPx ) = with ( DensityAmbient . current ) { min . toPx (). value to max . toPx (). value } val position = animatedFloat ( 0f ) position . setBounds ( minPx , maxPx ) Draggable ( DragDirection . Horizontal , position ,{ position . snapTo ( it ) }) { // dragValue is the current value in progress of dragging val draggedDp = with ( DensityAmbient . current ) { position . value . toDp () } Column { Text ( \"Drag me \" , modifier = LayoutPadding ( start = draggedDp )) Text ( \"Dragvalue: \" + position . value . dp ) } } }","title":"Draggable"},{"location":"foundation/draggable/#draggable","text":"https://developer.android.com/reference/kotlin/androidx/ui/foundation/gestures/package-summary#draggable @Composable fun DraggableDemo (){ val max = 300. dp val min = 0. dp val ( minPx , maxPx ) = with ( DensityAmbient . current ) { min . toPx (). value to max . toPx (). value } val position = animatedFloat ( 0f ) position . setBounds ( minPx , maxPx ) Draggable ( DragDirection . Horizontal , position ,{ position . snapTo ( it ) }) { // dragValue is the current value in progress of dragging val draggedDp = with ( DensityAmbient . current ) { position . value . toDp () } Column { Text ( \"Drag me \" , modifier = LayoutPadding ( start = draggedDp )) Text ( \"Dragvalue: \" + position . value . dp ) } } }","title":"Draggable"},{"location":"foundation/horizontal_scroller/","text":"HorizontalScroller \u00b6 When an app has layout content that might be longer than the width of the device and that content should be horizontal scrollable, then we need to use a HorizontalScroller. It is the horizontal equivalent of VerticalScroller @Composable fun HorizontalScrollerExample () { HorizontalScroller { //Only one child is allowed in a HorizontalScroller Row { for ( i in 0. . 100 ) { Text ( \"$i Hello World!\" , style =( MaterialTheme . typography ()). body1 ) } } } }","title":"HorizontalScroller"},{"location":"foundation/horizontal_scroller/#horizontalscroller","text":"When an app has layout content that might be longer than the width of the device and that content should be horizontal scrollable, then we need to use a HorizontalScroller. It is the horizontal equivalent of VerticalScroller @Composable fun HorizontalScrollerExample () { HorizontalScroller { //Only one child is allowed in a HorizontalScroller Row { for ( i in 0. . 100 ) { Text ( \"$i Hello World!\" , style =( MaterialTheme . typography ()). body1 ) } } } }","title":"HorizontalScroller"},{"location":"foundation/text/","text":"You can use Text to display text. You can use the style argument to define things like textdecoration or fontfamily. @Composable fun TextExample (){ Column { Text ( \"Just Text\" ) Text ( \"Text with cursive font\" , style = TextStyle ( fontFamily = FontFamily . Cursive )) Text ( text = \"Text with LineThrough\" , style = TextStyle ( textDecoration = TextDecoration . LineThrough ) ) Text ( text = \"Text with underline\" , style = TextStyle ( textDecoration = TextDecoration . Underline ) ) Text ( text = \"Text with underline, linethrough and bold\" , style = TextStyle ( textDecoration = TextDecoration . combine ( listOf ( TextDecoration . Underline , TextDecoration . LineThrough ) ), fontWeight = FontWeight . Bold ) ) } }","title":"Text"},{"location":"foundation/textfield/","text":"TextField \u00b6 TextField can be used to insert text @Composable fun TextFieldDemo () { Column { val state = state { \"\" } TextField ( value = state . value , onValueChange = { state . value = it } ) Text ( \"The textfield has this text: \" + state . value ) } }","title":"TextField"},{"location":"foundation/textfield/#textfield","text":"TextField can be used to insert text @Composable fun TextFieldDemo () { Column { val state = state { \"\" } TextField ( value = state . value , onValueChange = { state . value = it } ) Text ( \"The textfield has this text: \" + state . value ) } }","title":"TextField"},{"location":"foundation/vertical_scroller/","text":"VerticalScroller \u00b6 Info This is the API of version dev07. Newer versions may have a different one https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#verticalscroller When an app has layout content that might be longer than the height of the device and that content should be vertically scrollable, then we need to use a VerticalScroller. It\u2019s similar to a ScrollView Your browser does not support the video tag. https://github.com/Foso/Jetpack-Compose-Playground/blob/master/docs/images/VerticalScroller.webm @Composable fun VerticalScrollerExample () { VerticalScroller { //Only one child is allowed in a VerticalScroller Column { for ( i in 0. . 100 ) { Text ( \"$i Hello World!\" , style =( MaterialTheme . typography ()). body1 ) } } } } Note that a VerticalScroller can only contain a single child element so if you need multiple things to be scrollable, you need to wrap that content into a layout as shown above.","title":"VerticalScroller"},{"location":"foundation/vertical_scroller/#verticalscroller","text":"Info This is the API of version dev07. Newer versions may have a different one https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#verticalscroller When an app has layout content that might be longer than the height of the device and that content should be vertically scrollable, then we need to use a VerticalScroller. It\u2019s similar to a ScrollView Your browser does not support the video tag. https://github.com/Foso/Jetpack-Compose-Playground/blob/master/docs/images/VerticalScroller.webm @Composable fun VerticalScrollerExample () { VerticalScroller { //Only one child is allowed in a VerticalScroller Column { for ( i in 0. . 100 ) { Text ( \"$i Hello World!\" , style =( MaterialTheme . typography ()). body1 ) } } } } Note that a VerticalScroller can only contain a single child element so if you need multiple things to be scrollable, you need to wrap that content into a layout as shown above.","title":"VerticalScroller"},{"location":"general/codelabs/","text":"Codelabs \u00b6 Work in Progress","title":"Codelabs"},{"location":"general/codelabs/#codelabs","text":"Work in Progress","title":"Codelabs"},{"location":"general/compose_lifecycle/","text":"Info This is the API of version dev06. Newer versions may have a different one Compose has some \u201ceffects\u201d-function that can be used in compose function to track the lifecycle of a function. onActive {} willl be called the first time a compose function is applied. onDispose { } will be called when the compose function isn\u2019t part of the composition anymore. The example below has a Button that will count up everytime it gets clicked. When the count value gets 3, the Text() function will not be added anymore. The first time the LifecycleDemo will be executed, the +onActive{} in the if-clause will be executed. When the count value gets 3 +onDispose{} inside the if-clause will be called. @Composable fun LifecycleDemo () { val count = state { 0 } Column { Button ( onClick = { count . value ++ }) { Text ( \"Click me\" ) } if ( count . value < 3 ) { onActive { Log . d ( \"Compose\" , \"onactive with value: \" + count . value ) } onDispose { Log . d ( \"Compose\" , \"onDispose because value=\" + count . value ) } Text ( \"You have clicked the button: \" + count . value . toString ()) } } }","title":"Compose Lifecycle"},{"location":"general/compose_preview/","text":"You can use the @Preview annotation to preview compose functions inside Android Studio. @Preview @Composable fun TextDemo (){ Text ( \"Hello\" ) } @Preview ( name = \"MyPreviewName\" ) @Composable fun TextDemo2 (){ Text ( \"Hello\" ) } Android Studio Preview","title":"Compose Preview"},{"location":"general/detect_darkmode/","text":"How to detect dark mode \u00b6 Inside your composable you can use isSystemInDarkTheme to detect if the device is running in dark mode. val dark = isSystemInDarkTheme ()","title":"How to detect dark mode"},{"location":"general/detect_darkmode/#how-to-detect-dark-mode","text":"Inside your composable you can use isSystemInDarkTheme to detect if the device is running in dark mode. val dark = isSystemInDarkTheme ()","title":"How to detect dark mode"},{"location":"general/draw_on_canvas/","text":"@Composable fun CanvasDrawExample () { MaterialTheme { Container ( height = 60. dp , expanded = true ) { val paint = Paint () Draw { canvas , parentSize -> val centerY = 0f // draw rect paint . color = Color . Blue canvas . drawRect ( Rect ( 0f , centerY + 10 , parentSize . width . value , 55f ), paint ) // draw circle canvas . drawCircle ( Offset ( 50f , 200f ), 40f , paint ) //Draw a line paint . color = Color . Red paint . strokeWidth = 5f canvas . drawLine ( Offset ( 20f , 0f ), Offset ( 200f , 200f ), paint ) } } } }","title":"How to draw on Canvas"},{"location":"general/get_android_context/","text":"Info This is the API of version dev06. Newer versions may have a different one You can use ContextAmbient.current to receive the context of your Android App inside a Compose Function @Composable fun AndroidContextComposeDemo () { val context = ContextAmbient . current Text ( \"Read this string from Context: \" + context . getString ( R . string . app_name )) }","title":"How to get Android Context"},{"location":"general/getting_started/","text":"Info Note: Jetpack Compose is currently in Developer Preview. The API surface is not yet finalized, and changes are planned and expected. See the Compose Compiler and Runtime release notes and the Compose UI release notes for the latest updates. Android Studio \u00b6 To use Jetpack Compose you need to use at least a version >=4.1 Canary 1 Gradle Dependencies \u00b6 Add this inside in the android{} block your build.gradle buildFeatures { compose true } composeOptions { kotlinCompilerExtensionVersion \"0.1.0-dev08\" } Below are all compose dependencies that are online avaiable, you don\u2019t need to add all of them. dependencies { def compose_version = \"0.1.0-dev08\" implementation ( \"androidx.compose:compose-runtime:$compose_version\" ) implementation \"androidx.ui:ui-android-text:$compose_version\" implementation ( \"androidx.ui:ui-animation:$compose_version\" ) implementation ( \"androidx.ui:ui-animation-core:$compose_version\" ) implementation ( \"androidx.ui:ui-core:$compose_version\" ) implementation ( \"androidx.ui:ui-foundation:$compose_version\" ) implementation ( \"androidx.ui:ui-framework:$compose_version\" ) implementation ( \"androidx.ui:ui-geometry:$compose_version\" ) implementation ( \"androidx.ui:ui-graphics:$compose_version\" ) implementation ( \"androidx.ui:ui-layout:$compose_version\" ) implementation ( \"androidx.ui:ui-material:$compose_version\" ) implementation ( \"androidx.ui:ui-material-icons-core:$compose_version\" ) implementation ( \"androidx.ui:ui-material-icons-extended:$compose_version\" ) implementation ( \"androidx.ui:ui-platform:$compose_version\" ) implementation ( \"androidx.ui:ui-saved-instance-state:$compose_version\" ) implementation ( \"androidx.ui:ui-test:$compose_version\" ) implementation \"androidx.ui:ui-text:$compose_version\" implementation \"androidx.ui:ui-tooling:$compose_version\" implementation \"androidx.ui:ui-unit:$compose_version\" implementation \"androidx.ui:ui-util:$compose_version\" implementation \"androidx.ui:ui-vector:$compose_version\" }","title":"Project Setup"},{"location":"general/getting_started/#android-studio","text":"To use Jetpack Compose you need to use at least a version >=4.1 Canary 1","title":"Android Studio"},{"location":"general/getting_started/#gradle-dependencies","text":"Add this inside in the android{} block your build.gradle buildFeatures { compose true } composeOptions { kotlinCompilerExtensionVersion \"0.1.0-dev08\" } Below are all compose dependencies that are online avaiable, you don\u2019t need to add all of them. dependencies { def compose_version = \"0.1.0-dev08\" implementation ( \"androidx.compose:compose-runtime:$compose_version\" ) implementation \"androidx.ui:ui-android-text:$compose_version\" implementation ( \"androidx.ui:ui-animation:$compose_version\" ) implementation ( \"androidx.ui:ui-animation-core:$compose_version\" ) implementation ( \"androidx.ui:ui-core:$compose_version\" ) implementation ( \"androidx.ui:ui-foundation:$compose_version\" ) implementation ( \"androidx.ui:ui-framework:$compose_version\" ) implementation ( \"androidx.ui:ui-geometry:$compose_version\" ) implementation ( \"androidx.ui:ui-graphics:$compose_version\" ) implementation ( \"androidx.ui:ui-layout:$compose_version\" ) implementation ( \"androidx.ui:ui-material:$compose_version\" ) implementation ( \"androidx.ui:ui-material-icons-core:$compose_version\" ) implementation ( \"androidx.ui:ui-material-icons-extended:$compose_version\" ) implementation ( \"androidx.ui:ui-platform:$compose_version\" ) implementation ( \"androidx.ui:ui-saved-instance-state:$compose_version\" ) implementation ( \"androidx.ui:ui-test:$compose_version\" ) implementation \"androidx.ui:ui-text:$compose_version\" implementation \"androidx.ui:ui-tooling:$compose_version\" implementation \"androidx.ui:ui-unit:$compose_version\" implementation \"androidx.ui:ui-util:$compose_version\" implementation \"androidx.ui:ui-vector:$compose_version\" }","title":"Gradle Dependencies"},{"location":"general/helloworld/","text":"Hello World Compose \u00b6 Write a simple Compose function \u00b6 A basic Compose View is using a normal Kotlin function which is annotated with @Composable @Composable fun HelloWorld () { Text ( \"Hello World!\" ) } Use a Compose function as a view in your android app \u00b6 To use the HelloWorld() function in your App you have to use the setContent() extension function inside a onCreate() in an Activity. class MainActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContent { HelloWorld () } } }","title":"Hello World Compose"},{"location":"general/helloworld/#hello-world-compose","text":"","title":"Hello World Compose"},{"location":"general/helloworld/#write-a-simple-compose-function","text":"A basic Compose View is using a normal Kotlin function which is annotated with @Composable @Composable fun HelloWorld () { Text ( \"Hello World!\" ) }","title":"Write a simple Compose function"},{"location":"general/helloworld/#use-a-compose-function-as-a-view-in-your-android-app","text":"To use the HelloWorld() function in your App you have to use the setContent() extension function inside a onCreate() in an Activity. class MainActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContent { HelloWorld () } } }","title":"Use a Compose function as a view in your android app"},{"location":"general/loadimage/","text":"How to load an image \u00b6 You can use imageResource to load an image from the resources @Composable fun LoadImageResourceDemo (){ val imRes : ImageAsset = imageResource ( id = R . drawable . placeholder_1_1 ) Box ( modifier = Modifier . preferredHeight ( 50. dp ) + Modifier . preferredWidth ( 50. dp )) { Image ( imRes ) } }","title":"How to load an Image"},{"location":"general/loadimage/#how-to-load-an-image","text":"You can use imageResource to load an image from the resources @Composable fun LoadImageResourceDemo (){ val imRes : ImageAsset = imageResource ( id = R . drawable . placeholder_1_1 ) Box ( modifier = Modifier . preferredHeight ( 50. dp ) + Modifier . preferredWidth ( 50. dp )) { Image ( imRes ) } }","title":"How to load an image"},{"location":"general/modifier/","text":"Modifier \u00b6 Modifiers can be used modify certain aspects of a composable. To set them, a composable needs to accept a modifier as a parameter. Combine modifiers \u00b6 Column ( modifier = Modifier . preferredHeight ( 500. dp ) + Modifier . padding ( 100. dp )) { Text ( \"Hello\" ) } You can combine multiple modifiers with plus sign. The order is important modifier elements to the left are applied before modifier elements to the right. Some Modifiers \u00b6 Modifier.None \u00b6 This can be used as a default parameter. Modifier.preferredHeight() \u00b6 Modifies the height of a Compose UI layout element. Modifier.preferredWidth() \u00b6 Modifies the width of a Compose UI layout element. Modifier.preferredSize() \u00b6 Modifies the width and height of a Compose UI layout element together Modifier.padding() \u00b6 See LayoutPadding","title":"Modifier"},{"location":"general/modifier/#modifier","text":"Modifiers can be used modify certain aspects of a composable. To set them, a composable needs to accept a modifier as a parameter.","title":"Modifier"},{"location":"general/modifier/#combine-modifiers","text":"Column ( modifier = Modifier . preferredHeight ( 500. dp ) + Modifier . padding ( 100. dp )) { Text ( \"Hello\" ) } You can combine multiple modifiers with plus sign. The order is important modifier elements to the left are applied before modifier elements to the right.","title":"Combine modifiers"},{"location":"general/modifier/#some-modifiers","text":"","title":"Some Modifiers"},{"location":"general/modifier/#modifiernone","text":"This can be used as a default parameter.","title":"Modifier.None"},{"location":"general/modifier/#modifierpreferredheight","text":"Modifies the height of a Compose UI layout element.","title":"Modifier.preferredHeight()"},{"location":"general/modifier/#modifierpreferredwidth","text":"Modifies the width of a Compose UI layout element.","title":"Modifier.preferredWidth()"},{"location":"general/modifier/#modifierpreferredsize","text":"Modifies the width and height of a Compose UI layout element together","title":"Modifier.preferredSize()"},{"location":"general/modifier/#modifierpadding","text":"See LayoutPadding","title":"Modifier.padding()"},{"location":"general/state/","text":"Compose State \u00b6 Define a state \u00b6 1) state function \u00b6 val textState = state{\u201cHello\u201d} You can use the state function to create a state. state{T} will return a MutableState <T> 2) @Model \u00b6 You can also use @Model, when you annotate classes with it, you can use the whole class as a state and observe all properties. @Model class TestState { var count = 0 } val textState = TestState () You can then create a object of the class and use it as a state. In this example you would then use \u201ctextState.count\u201d to get/set the value of count. Example \u00b6 In this example we will create a composable with a Text and a Button. On a click on the button, the count state will go up and the text of Text will be updated. Initial state: After Button click: @Composable fun StateDemo (){ val countState = state { 0 } Column { Button ( backgroundColor = MaterialTheme . colors (). secondary , onClick = { countState . value ++}) { Text ( \"count up\" ) } Text ( \"You have clicked the Button \" + countState . value . toString () + \" times\" ) } } val countState = state { 0 } Here we define the state for the click counter. 0 will be the initial value. Because 0 is an Int, the counterState will only allow values which are Int. countState . value With the value property you can get/set the value of the counterstate. In the onClick() function of the Button, the value will be incremented. The Text shows the value of the counterstate. When counterstate is changed, \u201cText\u201d will also change.","title":"State"},{"location":"general/state/#compose-state","text":"","title":"Compose State"},{"location":"general/state/#define-a-state","text":"","title":"Define a state"},{"location":"general/state/#1-state-function","text":"val textState = state{\u201cHello\u201d} You can use the state function to create a state. state{T} will return a MutableState <T>","title":"1) state function"},{"location":"general/state/#2-model","text":"You can also use @Model, when you annotate classes with it, you can use the whole class as a state and observe all properties. @Model class TestState { var count = 0 } val textState = TestState () You can then create a object of the class and use it as a state. In this example you would then use \u201ctextState.count\u201d to get/set the value of count.","title":"2) @Model"},{"location":"general/state/#example","text":"In this example we will create a composable with a Text and a Button. On a click on the button, the count state will go up and the text of Text will be updated. Initial state: After Button click: @Composable fun StateDemo (){ val countState = state { 0 } Column { Button ( backgroundColor = MaterialTheme . colors (). secondary , onClick = { countState . value ++}) { Text ( \"count up\" ) } Text ( \"You have clicked the Button \" + countState . value . toString () + \" times\" ) } } val countState = state { 0 } Here we define the state for the click counter. 0 will be the initial value. Because 0 is an Int, the counterState will only allow values which are Int. countState . value With the value property you can get/set the value of the counterstate. In the onClick() function of the Button, the value will be incremented. The Text shows the value of the counterstate. When counterstate is changed, \u201cText\u201d will also change.","title":"Example"},{"location":"layout/column/","text":"Column \u00b6 A Column will show each children below the previous children. It\u2019 similar to a LinearLayout with vertical orientation. @Composable fun ColumnExample () { Column { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } }","title":"Column"},{"location":"layout/column/#column","text":"A Column will show each children below the previous children. It\u2019 similar to a LinearLayout with vertical orientation. @Composable fun ColumnExample () { Column { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } }","title":"Column"},{"location":"layout/constraintlayout/","text":"ConstraintLayout \u00b6 A ConstraintLayout in Compose is similar to a ConstraintLayout from the classic Android View System A ConstraintLayout requires a ConstraintSet as parameter. In the ConstraintSet all constraints of the layout has to be declared. children will set the children of the layout Simple ConstraintLayout \u00b6 @Composable fun SimpleConstraintLayout (){ ConstraintLayout ( constraintSet = ConstraintSet {}) { Text ( \"Text1\" ) } } This is a ConstraintLayout that just shows a text composable. The ConstraintSet is empty. Align a ConstraintLayout child \u00b6 Let\u2019s align the text composable created above, to the right end of it\u2019s a parent layout. First we need to create a LayoutTag for the Text. The LayoutTag will be added as a modifier. The tag name used inside the LayoutTag, will be used as a reference inside the ConstraintSet. Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) Inside the ConstraintSet, you have to add a tag() with the same name like your LayoutTag ConstraintSet { val text1 = tag ( \"text1\" ) } Now you can apply constraints to this tag. With constrainTo you can set a composable to another one. ConstraintSet { val text1 = tag ( \"text1\" ) text1 . apply { right constrainTo parent . right }} @Composable fun FinalConstraintLayout (){ ConstraintLayout ( constraintSet = ConstraintSet { val text1 = tag ( \"text1\" ) text1 . apply { right constrainTo parent . right } }) { Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) } } Now the right of your text will be constraint to the right of your parent composable. Create a guideline \u00b6 A guideline can used as an invisible line to which you can constrain your composables. The example below shows how to create a guideline at 50% of the height of the ConstraintLayout and align a Text to it. There are similar functions for guidelines from left, right and bottom. @Composable fun TopGuideLineExample (){ ConstraintLayout ( constraintSet = ConstraintSet { val half = createGuidelineFromTop ( percent = 0.5f ) val text1 = tag ( \"text1\" ) text1 . apply { top constrainTo half } }) { Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) } }","title":"ConstraintLayout"},{"location":"layout/constraintlayout/#constraintlayout","text":"A ConstraintLayout in Compose is similar to a ConstraintLayout from the classic Android View System A ConstraintLayout requires a ConstraintSet as parameter. In the ConstraintSet all constraints of the layout has to be declared. children will set the children of the layout","title":"ConstraintLayout"},{"location":"layout/constraintlayout/#simple-constraintlayout","text":"@Composable fun SimpleConstraintLayout (){ ConstraintLayout ( constraintSet = ConstraintSet {}) { Text ( \"Text1\" ) } } This is a ConstraintLayout that just shows a text composable. The ConstraintSet is empty.","title":"Simple ConstraintLayout"},{"location":"layout/constraintlayout/#align-a-constraintlayout-child","text":"Let\u2019s align the text composable created above, to the right end of it\u2019s a parent layout. First we need to create a LayoutTag for the Text. The LayoutTag will be added as a modifier. The tag name used inside the LayoutTag, will be used as a reference inside the ConstraintSet. Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) Inside the ConstraintSet, you have to add a tag() with the same name like your LayoutTag ConstraintSet { val text1 = tag ( \"text1\" ) } Now you can apply constraints to this tag. With constrainTo you can set a composable to another one. ConstraintSet { val text1 = tag ( \"text1\" ) text1 . apply { right constrainTo parent . right }} @Composable fun FinalConstraintLayout (){ ConstraintLayout ( constraintSet = ConstraintSet { val text1 = tag ( \"text1\" ) text1 . apply { right constrainTo parent . right } }) { Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) } } Now the right of your text will be constraint to the right of your parent composable.","title":"Align a ConstraintLayout child"},{"location":"layout/constraintlayout/#create-a-guideline","text":"A guideline can used as an invisible line to which you can constrain your composables. The example below shows how to create a guideline at 50% of the height of the ConstraintLayout and align a Text to it. There are similar functions for guidelines from left, right and bottom. @Composable fun TopGuideLineExample (){ ConstraintLayout ( constraintSet = ConstraintSet { val half = createGuidelineFromTop ( percent = 0.5f ) val text1 = tag ( \"text1\" ) text1 . apply { top constrainTo half } }) { Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) } }","title":"Create a guideline"},{"location":"layout/row/","text":"Row \u00b6 A Row will show each children next to the previous children. It\u2019 similar to a LinearLayout with horizontal orientation. @Composable fun RowExample () { Row { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } How to align row childrens with equal width \u00b6 @Composable fun RowExample () { Row ( arrangement = Arrangement . SpaceEvenly ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.SpaceEvenly , the children of Row will equal a width. How to align row childrens in center \u00b6 @Composable fun RowExample () { Row ( arrangement = Arrangement . Center ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.Center , the children of Row will aligned in the center of Row. How to align row childrens at end \u00b6 @Composable fun RowExample () { Row ( arrangement = Arrangement . End ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.End , the children of Row will aligned at the end of Row.","title":"Row"},{"location":"layout/row/#row","text":"A Row will show each children next to the previous children. It\u2019 similar to a LinearLayout with horizontal orientation. @Composable fun RowExample () { Row { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } }","title":"Row"},{"location":"layout/row/#how-to-align-row-childrens-with-equal-width","text":"@Composable fun RowExample () { Row ( arrangement = Arrangement . SpaceEvenly ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.SpaceEvenly , the children of Row will equal a width.","title":"How to align row childrens with equal width"},{"location":"layout/row/#how-to-align-row-childrens-in-center","text":"@Composable fun RowExample () { Row ( arrangement = Arrangement . Center ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.Center , the children of Row will aligned in the center of Row.","title":"How to align row childrens in center"},{"location":"layout/row/#how-to-align-row-childrens-at-end","text":"@Composable fun RowExample () { Row ( arrangement = Arrangement . End ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.End , the children of Row will aligned at the end of Row.","title":"How to align row childrens at end"},{"location":"layout/scaffold/","text":"Scaffold \u00b6 A Scaffold is a layout which implements the basic material design layout structure. You can add things like a TopBar, BottomBar, FAB or a Drawer. @Composable fun ScaffoldDemo () { val materialBlue700 = Color ( 0 xFF1976D2 ) Scaffold ( scaffoldState = ScaffoldState ( DrawerState . Opened ), topAppBar = { TopAppBar ( title = { Text ( \"TopAppBar\" )}, color = materialBlue700 ) }, floatingActionButtonPosition = Scaffold . FabPosition . End , floatingActionButton = { FloatingActionButton ( onClick = {}){ Text ( \"X\" ) } }, drawerContent = { Text ( text = \"drawerContent\" ) }, bodyContent = { Text ( \"BodyContent\" ) }, bottomAppBar = { BottomAppBar ( color = materialBlue700 ) { Text ( \"BottomAppBar\" ) } } ) } scaffoldState \u00b6 With the scaffoldState you can set the opening state of the drawer(DrawerState.Opened or DrawerState.Closed) topAppBar \u00b6 Here you can set the part of your layout that should be displayed on top of the screen. You can use it for things like a toolbar. You can set any Composable, but TopAppBar is already made for this usecase. floatingActionButton \u00b6 Here you can add FloatingActionButton. You can set any Composable, but FloatingActionButton is already made for this usecase floatingActionButtonPosition \u00b6 When you have added a FAB, you can use this specify the position of it. The default position is at the end of your layout. drawerContent \u00b6 Here you can set the content of your drawer. bodyContent \u00b6 This is the primary content of the scaffold. You can add any Composable here. bottomAppBar \u00b6 Here you can set the part of your layout is on bottom of the screen. You can set any Composable, but BottomAppBar is already made for this usecase.","title":"Scaffold"},{"location":"layout/scaffold/#scaffold","text":"A Scaffold is a layout which implements the basic material design layout structure. You can add things like a TopBar, BottomBar, FAB or a Drawer. @Composable fun ScaffoldDemo () { val materialBlue700 = Color ( 0 xFF1976D2 ) Scaffold ( scaffoldState = ScaffoldState ( DrawerState . Opened ), topAppBar = { TopAppBar ( title = { Text ( \"TopAppBar\" )}, color = materialBlue700 ) }, floatingActionButtonPosition = Scaffold . FabPosition . End , floatingActionButton = { FloatingActionButton ( onClick = {}){ Text ( \"X\" ) } }, drawerContent = { Text ( text = \"drawerContent\" ) }, bodyContent = { Text ( \"BodyContent\" ) }, bottomAppBar = { BottomAppBar ( color = materialBlue700 ) { Text ( \"BottomAppBar\" ) } } ) }","title":"Scaffold"},{"location":"layout/scaffold/#scaffoldstate","text":"With the scaffoldState you can set the opening state of the drawer(DrawerState.Opened or DrawerState.Closed)","title":"scaffoldState"},{"location":"layout/scaffold/#topappbar","text":"Here you can set the part of your layout that should be displayed on top of the screen. You can use it for things like a toolbar. You can set any Composable, but TopAppBar is already made for this usecase.","title":"topAppBar"},{"location":"layout/scaffold/#floatingactionbutton","text":"Here you can add FloatingActionButton. You can set any Composable, but FloatingActionButton is already made for this usecase","title":"floatingActionButton"},{"location":"layout/scaffold/#floatingactionbuttonposition","text":"When you have added a FAB, you can use this specify the position of it. The default position is at the end of your layout.","title":"floatingActionButtonPosition"},{"location":"layout/scaffold/#drawercontent","text":"Here you can set the content of your drawer.","title":"drawerContent"},{"location":"layout/scaffold/#bodycontent","text":"This is the primary content of the scaffold. You can add any Composable here.","title":"bodyContent"},{"location":"layout/scaffold/#bottomappbar","text":"Here you can set the part of your layout is on bottom of the screen. You can set any Composable, but BottomAppBar is already made for this usecase.","title":"bottomAppBar"},{"location":"layout/stack/","text":"Stack \u00b6 The children of the Stack layout will be stacked over each other. You can use the LayoutGravity modifier to specify where the composable should be drawn. Info This is the API of version dev08. Newer versions may have a different one @Composable fun StackExample () { Stack () { Text ( \"This text is drawed first\" , modifier = Modifier . gravity ( Alignment . TopCenter )) Box ( Modifier . gravity ( Alignment . TopCenter ) + Modifier . fillMaxHeight () + Modifier . preferredWidth ( 50. dp ), backgroundColor = Color . Blue ) Text ( \"This text is drawed last\" , modifier = Modifier . gravity ( Alignment . Center )) FloatingActionButton ( contentColor = Color . Blue , modifier = Modifier . gravity ( Alignment . BottomEnd ) + LayoutPadding ( 12. dp ), onClick = {} ){ Text ( \"x\" ) } } }","title":"Stack"},{"location":"layout/stack/#stack","text":"The children of the Stack layout will be stacked over each other. You can use the LayoutGravity modifier to specify where the composable should be drawn. Info This is the API of version dev08. Newer versions may have a different one @Composable fun StackExample () { Stack () { Text ( \"This text is drawed first\" , modifier = Modifier . gravity ( Alignment . TopCenter )) Box ( Modifier . gravity ( Alignment . TopCenter ) + Modifier . fillMaxHeight () + Modifier . preferredWidth ( 50. dp ), backgroundColor = Color . Blue ) Text ( \"This text is drawed last\" , modifier = Modifier . gravity ( Alignment . Center )) FloatingActionButton ( contentColor = Color . Blue , modifier = Modifier . gravity ( Alignment . BottomEnd ) + LayoutPadding ( 12. dp ), onClick = {} ){ Text ( \"x\" ) } } }","title":"Stack"},{"location":"material/alertdialog/","text":"Info This is the API of version dev06. Newer versions may have a different one @Composable fun AlertDialogSample () { MaterialTheme { Column { val openDialog = state { false } Button ( onClick = { openDialog . value = true }){ Text ( \"Click me\" ) } if ( openDialog . value ) { AlertDialog ( onCloseRequest = { openDialog . value = false }, title = { Text ( \"Dialog Title\" ) }, text = { Text ( \"Here is a text \" ) }, confirmButton = { Button ( onClick = { openDialog . value = false }){ Text ( \"This is the Confirm Button\" ) } }, dismissButton = { Button ( onClick = { openDialog . value = false }){ Text ( \"This is the dismiss Button\" ) } }, buttonLayout = AlertDialogButtonLayout . Stacked ) } } } }","title":"AlertDialog"},{"location":"material/button/","text":"Button \u00b6 A Button has a onClick-Function. You can not set text as an argument. But you can add a Text-Composable or other composables as child elements of the Button. @Composable fun ButtonExample () { Button ( onClick = { /* Do something! */ }, backgroundColor = Color . Red ) { Text ( \"Button\" ) } }","title":"Button"},{"location":"material/button/#button","text":"A Button has a onClick-Function. You can not set text as an argument. But you can add a Text-Composable or other composables as child elements of the Button. @Composable fun ButtonExample () { Button ( onClick = { /* Do something! */ }, backgroundColor = Color . Red ) { Text ( \"Button\" ) } }","title":"Button"},{"location":"material/checkbox/","text":"Info This is the API of version dev08. Newer versions may have a different one @Composable fun CheckBoxDemo () { val checkedState = state { true } Checkbox ( checked = checkedState . value , onCheckedChange = { checkedState . value = it } ) }","title":"Checkbox"},{"location":"material/modaldrawer/","text":"ModalDrawerLayout \u00b6 Info This is the API of version dev08. Newer versions may have a different one With a ModalDrawerLayout you can create a navigation drawer. You can define a drawer state and an onStateChange function. You define the content of the drawer with drawerContent and the rest of your layout in bodyContent @Composable fun ModalDrawerLayoutSample () { val ( state , onStateChange ) = state { DrawerState . Closed } ModalDrawerLayout ( drawerState = state , onStateChange = onStateChange , drawerContent = { Column { Text ( \"Text in Drawer\" ) Button ( onClick = { onStateChange ( DrawerState . Closed ) }) { Text ( \"Close Drawer\" ) } } }, bodyContent = { Column { Text ( \"Text in Bodycontext\" ) Button ( onClick = { onStateChange ( DrawerState . Opened ) }) { Text ( \"Click to open\" ) } } } ) }","title":"ModalDrawerLayout"},{"location":"material/modaldrawer/#modaldrawerlayout","text":"Info This is the API of version dev08. Newer versions may have a different one With a ModalDrawerLayout you can create a navigation drawer. You can define a drawer state and an onStateChange function. You define the content of the drawer with drawerContent and the rest of your layout in bodyContent @Composable fun ModalDrawerLayoutSample () { val ( state , onStateChange ) = state { DrawerState . Closed } ModalDrawerLayout ( drawerState = state , onStateChange = onStateChange , drawerContent = { Column { Text ( \"Text in Drawer\" ) Button ( onClick = { onStateChange ( DrawerState . Closed ) }) { Text ( \"Close Drawer\" ) } } }, bodyContent = { Column { Text ( \"Text in Bodycontext\" ) Button ( onClick = { onStateChange ( DrawerState . Opened ) }) { Text ( \"Click to open\" ) } } } ) }","title":"ModalDrawerLayout"},{"location":"material/radiogroup/","text":"Info This is the API of version dev07. Newer versions may have a different one @Composable fun RadioGroupSample () { val radioOptions = listOf ( \"A\" , \"B\" , \"C\" ) val ( selectedOption , onOptionSelected ) = state { radioOptions [ 1 ] } RadioGroup ( options = radioOptions , selectedOption = selectedOption , onSelectedChange = onOptionSelected ) }","title":"RadioGroup"},{"location":"material/switch/","text":"Info This is the API of version dev08. Newer versions may have a different one @Composable fun SwitchDemo () { val checkedState = state { true } Switch ( checked = checkedState . value , onCheckedChange = { checkedState . value = it } ) }","title":"Switch"}]}